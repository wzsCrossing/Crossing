<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>题解 2014-2015 ACM-ICPC, Asia Xian Regional Contest 【Color】</title>
    <url>/2019/10/24/2014-2015-ACM-ICPC-Asia-Xian-Regional-Contest-F/</url>
    <content><![CDATA[<h1 id="large-mathcal-Description"><a href="#large-mathcal-Description" class="headerlink" title="$\large\mathcal{Description}$"></a>$\large\mathcal{Description}$</h1><p><img src="https://i.loli.net/2019/10/24/Il5FfpLjPexiVCT.png" alt></p>
<p><strong>题意</strong> $:$ 从 $m$ 种颜色中取恰好 $k$ 种颜色给排成一排的 $n$ 朵花染色，使相邻花朵的颜色不同。求方案数。(两种方案不同，当且仅当至少有一朵花的颜色不同)</p>
<p><strong>$\Large{☞}$ <a href="http://codeforces.com/gym/100548/submit" target="_blank" rel="noopener">提交通道</a></strong> ($F$ 题)</p>
<h1 id="large-mathcal-Solution"><a href="#large-mathcal-Solution" class="headerlink" title="$\large\mathcal{Solution}$"></a>$\large\mathcal{Solution}$</h1><p>首先，从 $m$ 种颜色中选出 $k$ 种。很显然，有 $C_m^k$ 种方案。</p>
<p>然后考虑如何选恰好 $k$ 种。</p>
<p>$k \times (k - 1)^{n-1}$ 是至多选 $k$ 种的方案数，而不是恰好选 $k$ 种的方案数。</p>
<p>然后，一个很自然的想法 $:$ 至多选 $k$ 种的方案数减去至多选 $(k - 1)$ 种的方案数。</p>
<p><del>于是熟练地敲完代码，测一发样例，错了！！！</del></p>
<p>为什么这个想法是错的呢？</p>
<p>同一个 $(k - 2)$ 种的状态会被 $2$ 个 $(k - 1)$ 种的状态所包含。所以会多减。</p>
<p>因此，需要<strong>容斥</strong>。<br>$$<br>\sum\limits_{i = 1}^k (-1)^{k - i} \times C_k^i \times i \times (i - 1)^{n - 1}<br>$$</p>
<h1 id="large-mathcal-Code"><a href="#large-mathcal-Code" class="headerlink" title="$\large\mathcal{Code}$"></a>$\large\mathcal{Code}$</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="literal">true</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()) f ^= ch == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x = f ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Fac[N], iFac[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Power</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * a % P;</span><br><span class="line">        a = <span class="number">1L</span>L * a * a % P;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Power(x, P - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;	</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span> || m &lt; <span class="number">0</span> || m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1L</span>L * Fac[n] * iFac[n - m] % P * iFac[m] % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _C(<span class="keyword">int</span> n, <span class="keyword">int</span> m) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span> || m &lt; <span class="number">0</span> || m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> s1 = <span class="number">1</span>, s2 = <span class="number">1</span>;	</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; n - m; --i) s1 = <span class="number">1L</span>L * s1 * i % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) s2 = <span class="number">1L</span>L * s2 * i % P;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1L</span>L * s1 * Inv(s2) % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) Fac[i] = <span class="number">1L</span>L * Fac[i - <span class="number">1</span>] * i % P;</span><br><span class="line">    iFac[N - <span class="number">1</span>] = Inv(Fac[N - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) iFac[i] = <span class="number">1L</span>L * iFac[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % P;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    read(T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> Case = <span class="number">1</span>; Case &lt;= T; ++Case) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m, k;</span><br><span class="line">        read(n), read(m), read(k);</span><br><span class="line">        <span class="keyword">int</span> Ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) Ans = ((Ans + <span class="number">1L</span>L * (i &amp; <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>) * C(k, i) % P * (k - i) % P * Power(k - i - <span class="number">1</span>, n - <span class="number">1</span>) % P) % P + P) % P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, Case, (<span class="keyword">int</span>)(<span class="number">1L</span>L * Ans * _C(m, k) % P));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title>XJ模拟赛18</title>
    <url>/2019/10/23/XJOI-Contest1269/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="请在此输入密码,按Enter键查看" />
    <label for="hbePass">请在此输入密码,按Enter键查看</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c0648b7cc61b40500bbca128165b7e10806a1f2a755fb03a1e25d2e4efcb9ec9"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>比赛</category>
      </categories>
  </entry>
  <entry>
    <title>题解 P1850 【换教室】</title>
    <url>/2019/10/22/solve-P1850/</url>
    <content><![CDATA[<h1 id="Large-mathcal-Description"><a href="#Large-mathcal-Description" class="headerlink" title="$\Large\mathcal{Description}$"></a>$\Large\mathcal{Description}$</h1><p>有 $n$ 个时间段，每个时间段都有两节课，牛牛预先被安排在教室 $c_i$ 上课，而另一节课程在教室 $d_i$ 进行。</p>
<p>牛牛可以申请更换第 $i$ 节课的上课地点(即在教室 $d_i$ 进行)，申请被通过的概率为 $k_i$。</p>
<p>给定一张带边权无向图，描述教室之间的联通关系。</p>
<p>现要求出在不提交超过 $m$ 次申请(<strong>不是申请成功的次数</strong>)的情况下，经过边的权值总和的期望的最小值。</p>
<h1 id="Large-mathcal-Solution"><a href="#Large-mathcal-Solution" class="headerlink" title="$\Large\mathcal{Solution}$"></a>$\Large\mathcal{Solution}$</h1><p>期望DP。</p>
<p>设 $F[i][j][1/0]$ 表示 当前考虑到第 $i$ 个时间段，已经申请了 $j$ 次且第 $i$ 个时间段是否申请的最小期望值。$Dis[i][j]$ 表示 $i,j$ 两个教室之间的最短路。</p>
<p>接着我们尝试列出状态转移方程</p>
<p>先考虑不申请的情况。</p>
<p>$F[i][j][0] = min(F[i - 1][j][0] + Dis_{c_{i-1},c_i}, F[i - 1][j][1] + k_{i - 1} * Dis_{d_{i-1}, c_i} + (1 - k_{i - 1}) * Dis_{c_{i - 1},c_i})$</p>
<p>同样的，我们也可以写出申请的情况。<del>复杂的一批</del></p>
<p>$$F[i][j][1] = min(F[i - 1][j - 1][0] + k_i * Dis_{c_{i - 1},d_i} + (1 - k_i) * Dis_{c_{i - 1},c_i}, F[i - 1][j - 1][1] + k_{i - 1} * k_i * Dis_{d_{i - 1},d_i} + (1 - k_{i - 1}) * k_i * Dis_{c_{i - 1},d_i} + k_{i - 1} * (1 - k_i) * Dis_{d_{i - 1},c_i} + (1 - k_{i - 1}) * (1 - k_i) * Dis_{c_{i - 1},c_i})$$</p>
<p>这样，就可以快乐地DP了！！！</p>
<p>现在，我们只需要求出 $Dis$，问题就可以解决了。</p>
<p>我们注意到最多只有 $300$ 个教室，所以直接跑 $Floyd$ 就可以了。</p>
<h1 id="Large-mathcal-Code"><a href="#Large-mathcal-Code" class="headerlink" title="$\Large\mathcal{Code}$"></a>$\Large\mathcal{Code}$</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="literal">true</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()) f ^= ch == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x = f ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">7</span>, M = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Dis[M][M], A[N], B[N];</span><br><span class="line"><span class="keyword">double</span> F[N][N][<span class="number">2</span>], K[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("a.in", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> n, m, v, e;</span><br><span class="line">    read(n), read(m), read(v), read(e);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(B[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;K[i]);</span><br><span class="line">    <span class="built_in">memset</span>(Dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(Dis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= e; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, k;</span><br><span class="line">        read(x), read(y), read(k);</span><br><span class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; Dis[x][y]) Dis[x][y] = Dis[y][x] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= v; ++k)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= v; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == k) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> r = Dis[i][k];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= v; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j || j == k) <span class="keyword">continue</span>;</span><br><span class="line">                Dis[i][j] = <span class="built_in">std</span>::min(Dis[i][j], r + Dis[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= v; ++i) Dis[i][i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j) F[i][j][<span class="number">0</span>] = F[i][j][<span class="number">1</span>] = inf;</span><br><span class="line">    F[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = F[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        F[i][<span class="number">0</span>][<span class="number">0</span>] = F[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] + Dis[A[i - <span class="number">1</span>]][A[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            F[i][j][<span class="number">0</span>] = <span class="built_in">std</span>::min(F[i - <span class="number">1</span>][j][<span class="number">0</span>] + Dis[A[i - <span class="number">1</span>]][A[i]], F[i - <span class="number">1</span>][j][<span class="number">1</span>] + K[i - <span class="number">1</span>] * Dis[B[i - <span class="number">1</span>]][A[i]] + (<span class="number">1</span> - K[i - <span class="number">1</span>]) * Dis[A[i - <span class="number">1</span>]][A[i]]);</span><br><span class="line">            F[i][j][<span class="number">1</span>] = <span class="built_in">std</span>::min(F[i - <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">0</span>] + K[i] * Dis[A[i - <span class="number">1</span>]][B[i]] + (<span class="number">1</span> - K[i]) * Dis[A[i - <span class="number">1</span>]][A[i]], F[i - <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">1</span>] + K[i - <span class="number">1</span>] * K[i] * Dis[B[i - <span class="number">1</span>]][B[i]] + (<span class="number">1</span> - K[i - <span class="number">1</span>]) * K[i] * Dis[A[i - <span class="number">1</span>]][B[i]] + K[i - <span class="number">1</span>] * (<span class="number">1</span> - K[i]) * Dis[B[i - <span class="number">1</span>]][A[i]] + (<span class="number">1</span> - K[i - <span class="number">1</span>]) * (<span class="number">1</span> - K[i]) * Dis[A[i - <span class="number">1</span>]][A[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> Ans = F[n][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) Ans = <span class="built_in">std</span>::min(Ans, <span class="built_in">std</span>::min(F[n][i][<span class="number">0</span>], F[n][i][<span class="number">1</span>]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, <span class="number">1.0</span> * (<span class="keyword">int</span>)(Ans * <span class="number">100</span> + <span class="number">0.5</span>) / <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
        <category>luogu</category>
      </categories>
      <tags>
        <tag>概率期望</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>一些有关Hexo博客的好东西</title>
    <url>/2019/10/21/%E4%B8%80%E4%BA%9B%E6%9C%89%E5%85%B3Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A5%BD%E4%B8%9C%E8%A5%BF/</url>
    <content><![CDATA[<ul>
<li><a href="https://oierlin.cf/2018/09/29/Github+Hexo%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">$Github+Hexo$ 博客搭建教程</a></li>
<li><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="noopener">$Hexo$ 文章加密</a></li>
<li><a href="https://blog.csdn.net/qwerty200696/article/details/79010629" target="_blank" rel="noopener">$Hexo$ 文章置顶</a></li>
<li><a href="https://www.luogu.org/blog/IowaBattleship/latex-ru-men" target="_blank" rel="noopener">$Latex$ 语法</a></li>
<li><a href="https://www.luogu.org/blog/IowaBattleship/latex-gong-shi-tai-quan" target="_blank" rel="noopener">$Latex$ 数学公式</a></li>
<li><a href="http://wangwlj.com/2017/09/09/blog-opti/" target="_blank" rel="noopener">优化合集(较完整)</a></li>
</ul>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>题解 「LibreOJ NOI Round 1」北校门外的回忆</title>
    <url>/2019/10/05/solve-loj510/</url>
    <content><![CDATA[<p>神仙题一道</p>
<h1 id="Large-mathcal-Description"><a href="#Large-mathcal-Description" class="headerlink" title="$\Large\mathcal{Description}$"></a>$\Large\mathcal{Description}$</h1><p><del>无耻地</del>丢一个链接 $\Large{☞}$ <a href="https://loj.ac/problem/510" target="_blank" rel="noopener">$\Large{戳这里}$</a></p>
<p><del>题目内容严重超出我的表达范围</del></p>
<h1 id="Large-mathcal-Solution"><a href="#Large-mathcal-Solution" class="headerlink" title="$\Large\mathcal{Solution}$"></a>$\Large\mathcal{Solution}$</h1><p>首先，有这样的结论 $:$</p>
<ul>
<li>$k$ 为奇数时，$x \times 2^y$ $mod$ $k$ 成环 </li>
<li>$k$ 为偶数且 $x$ 所含因子 $2$ 的个数比 $k$ 多时，$x \times 2^y$ $mod$ $k$ 成环</li>
</ul>
<p>归纳一下就是，<strong>$x$ 所含因子 $2$ 的个数比 $k$ 多(或相等)时，$x \times 2^y$ $mod$ $k$ 成环</strong>。($k$ 为奇数时，所含因子 $2$ 的个数为 $0$) 相关证明会在最后给出。</p>
<p>所以，$1-n$ 每一个数都只有两种状态 $:$ 在一条链上 $or$ 不在链上</p>
<p>我们可以找出每一条链，并对这些链进行维护(线段树或者树状数组)。而对于不在链上的点，可以暴力跳到链上，每次最多跳 $O(log_{2}n)$ 次。</p>
<p>这就是本题的大体思路。</p>
<p>但这还没完。</p>
<p>我们注意到 $n$ 有 $1e9$ ，这显然不能直接维护 <del>时间、空间两开($bao$)花($zha$)</del></p>
<p>但可以发现由于是链，所以一条链可以由一个数确定。于是我们可以倍增预处理出每个点所在的链，之后用动态开点线段树对链进行维护。</p>
<p>完美！时间、空间两开花！</p>
<h1 id="Large-mathcal-Code"><a href="#Large-mathcal-Code" class="headerlink" title="$\Large\mathcal{Code}$"></a>$\Large\mathcal{Code}$</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="literal">true</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()) f ^= ch == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x = f ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q, k;</span><br><span class="line"><span class="keyword">int</span> up[N], to[N][<span class="number">20</span>], upt[N][<span class="number">20</span>], len[N], p[N], num[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;      \\预处理</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) p[i] = log2(i &amp; (-i));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i] || p[i] &lt; p[k]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line">        num[++cnt] = i, vis[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> x = (i &lt;&lt; <span class="number">1</span>); </span><br><span class="line">        <span class="keyword">if</span> (x &gt;= k) ++tot, x -= k;</span><br><span class="line">        <span class="keyword">while</span> (x != i) &#123;</span><br><span class="line">            num[++cnt] = x, vis[x] = <span class="literal">true</span>;</span><br><span class="line">            x &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (x &gt;= k) ++tot, x -= k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; ++j) &#123;</span><br><span class="line">            up[num[j]] = tot, len[num[j]] = cnt;</span><br><span class="line">            <span class="keyword">int</span> y = (j + cnt - <span class="number">2</span>) % cnt + <span class="number">1</span>;</span><br><span class="line">            to[num[j]][<span class="number">0</span>] = num[y], upt[num[j]][<span class="number">0</span>] = (num[y] * <span class="number">2</span> &gt;= k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= cnt; ++l) &#123;</span><br><span class="line">                to[num[l]][j] = to[to[num[l]][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">                upt[num[l]][j] = upt[num[l]][j - <span class="number">1</span>] + upt[to[num[l]][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!(x % k)) x /= k;</span><br><span class="line">    <span class="keyword">return</span> x % k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbitv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!(x % k)) x /= k, ++tot;</span><br><span class="line">    x %= k;</span><br><span class="line">    <span class="keyword">while</span> (tot--) x *= k;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Find_Head</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;    \\找链首</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!(x % k)) x /= k, ++tot;</span><br><span class="line">    <span class="keyword">int</span> head = x % k, cnt = (x - head) / k; dis = <span class="number">1</span>;</span><br><span class="line">    dis += (cnt / up[head]) * len[head], cnt %= up[head];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (upt[head][i] &gt; cnt) <span class="keyword">continue</span>;</span><br><span class="line">        cnt -= upt[head][i];</span><br><span class="line">        dis += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        head = to[head][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (tot--) head *= k;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls, rs, val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> rt = <span class="number">0</span>, siz = <span class="number">0</span>;</span><br><span class="line">    node tre[N &lt;&lt; <span class="number">5</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!p) p = ++siz;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">            tre[p].val ^= v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid) update(tre[p].ls, l, mid, x, y, v);</span><br><span class="line">        <span class="keyword">if</span> (y &gt; mid) update(tre[p].rs, mid + <span class="number">1</span>, r, x, y, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span> tre[p].val;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid) <span class="keyword">return</span> query(tre[p].ls, l, mid, x) ^ tre[p].val;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(tre[p].rs, mid + <span class="number">1</span>, r, x) ^ tre[p].val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segment_Tree T1, T2, T3; <span class="comment">//T1 : 非链  T2 : 链  T3 : 链头</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(q), read(k);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> opt, x, v;</span><br><span class="line">        read(opt), read(x);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            read(v);</span><br><span class="line">            <span class="keyword">while</span> (x &lt;= n &amp;&amp; p[lowbit(x)] &lt; p[k]) &#123;</span><br><span class="line">                T1.update(T1.rt, <span class="number">1</span>, n, x, x, v);</span><br><span class="line">                x += lowbitv(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x &gt; n) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> head = Find_Head(x);</span><br><span class="line">            T2.rt = T3.query(T3.rt, <span class="number">1</span>, n, head);</span><br><span class="line">            <span class="keyword">int</span> tmp = T2.rt; </span><br><span class="line">            T2.update(T2.rt, <span class="number">1</span>, n, dis, n, v);</span><br><span class="line">            <span class="keyword">if</span> (!tmp) T3.update(T3.rt, <span class="number">1</span>, n, head, head, T2.rt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[lowbit(x)] &lt; p[k]) ans ^= T1.query(T1.rt, <span class="number">1</span>, n, x);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> head = Find_Head(x);</span><br><span class="line">                    T2.rt = T3.query(T3.rt, <span class="number">1</span>, n, head);</span><br><span class="line">                    <span class="keyword">if</span> (T2.rt) ans ^= T2.query(T2.rt, <span class="number">1</span>, n, dis);</span><br><span class="line">                &#125;</span><br><span class="line">                x -= lowbitv(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Large-mathcal-Extended"><a href="#Large-mathcal-Extended" class="headerlink" title="$\Large\mathcal{Extended}$"></a>$\Large\mathcal{Extended}$</h1><p>结论 $:$ $x$ 所含因子 $2$ 的个数比 $k$ 多(或相等)时，$x \times 2^y$ $mod$ $k$ 成环</p>
<p>因为 $x$ 的变化只与最后一个非零位的数值有关。所以这里讨论的 $x$ 取值为 $1 \le x \le k - 1$。</p>
<p>$x + lowbitv(x)$ 相当于 $x \times 2$，每一次运算 $x$ 的因子 $2$ 的个数都会多一，其他不变，所以该位不会变成零 (不会变成 $k$ 的倍数)。</p>
<p>有根据欧拉定理 $a^{\phi(p)}$ $\equiv$ $1$ ($mod~p$)，所以值成环。</p>
<p>证毕。</p>
]]></content>
      <categories>
        <category>题解</category>
        <category>Loj</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 Comet-OJ-3980 【字符串】</title>
    <url>/2019/10/03/solve-Comet-OJ-3940/</url>
    <content><![CDATA[<p>复习一波 $SA$ (后缀数组)</p>
<h1 id="Large-mathcal-Description"><a href="#Large-mathcal-Description" class="headerlink" title="$\Large\mathcal{Description}$"></a>$\Large\mathcal{Description}$</h1><p>给定一个字符串 $s$。</p>
<p>有 $q$ 次询问，每次询问给定一个字符串 $t$ ，求最小的整数 $k$，满足以下两个条件：</p>
<ol>
<li>$0 \leqslant k \leqslant  |s| - |t|$ </li>
<li>$s_{[k,\ k\ +\ |t|\ -\ 1]}$ 的字典序大于 $t$ </li>
</ol>
<p>数据范围 $:$ $1 \leqslant  |s| \leqslant 2 \times 10^5$，$1 \leqslant q \leqslant 5000$，$\sum |t| \leqslant 2 \times 10^5$</p>
<h1 id="Large-mathcal-Solution"><a href="#Large-mathcal-Solution" class="headerlink" title="$\Large\mathcal{Solution}$"></a>$\Large\mathcal{Solution}$</h1><p>首先，<strong>一个字符串的任何子串肯定是该字符串的一个后缀的前缀</strong>。</p>
<p>所以，我们对字符串的后缀进行处理。<del>各种数据结构</del>，这里介绍 $SA$ 的做法。 </p>
<p><del>你们肯定都会 $SAM$，幼小的我只会 $SA$</del></p>
<p>我们<del>熟练地</del>把所有串都连在一起，串与串之间用一些大于字符串中所有字符的<del>奇怪</del>字符隔开。(用 $SA$ 处理多个串的基本套路)</p>
<p>跑一遍 $SA$ 后，我们就得到了 $sa$ 数组(即排名为 $i$ 的后缀的起始位置下标)</p>
<p> 然后从大到小枚举后缀即可。</p>
<h1 id="Large-mathcal-Code"><a href="#Large-mathcal-Code" class="headerlink" title="$\Large\mathcal{Code}$"></a>$\Large\mathcal{Code}$</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="literal">true</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()) f ^= ch == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x = f ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">7</span>, Q = <span class="number">5e3</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sa[N], x[N], tot[N], y[N], len[Q], ans[Q], pos[N], n;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="string">'z'</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) x[i] = s[i], ++tot[x[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) tot[i] += tot[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) sa[tot[x[i]]--] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">1</span>; i &lt;= n; ++i) y[++num] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (sa[i] &gt; k) y[++num] = sa[i] - k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) tot[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ++tot[x[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) tot[i] += tot[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) sa[tot[x[y[i]]]--] = y[i], y[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">std</span>::swap(x, y);</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            x[sa[i]] = i != <span class="number">1</span> &amp;&amp; y[sa[i]] == y[sa[i - <span class="number">1</span>]] &amp;&amp; y[sa[i] + k] == y[sa[i - <span class="number">1</span>] + k] ? num : ++num;</span><br><span class="line">        <span class="keyword">if</span> (num == n) <span class="keyword">return</span>;</span><br><span class="line">        m = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    read(q);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> l = s.length(); n = l;</span><br><span class="line">    s = <span class="string">' '</span> + s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> t;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        len[i] = t.length();</span><br><span class="line">        s += (<span class="keyword">char</span>)(<span class="string">'z'</span> + <span class="number">1</span>), ++n;</span><br><span class="line">        pos[n + <span class="number">1</span>] = i;</span><br><span class="line">        s += t, n += len[i];</span><br><span class="line">    &#125;</span><br><span class="line">    SA();</span><br><span class="line">    <span class="keyword">int</span> minx = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sa[i] &lt;= l) minx = <span class="built_in">std</span>::min(minx, sa[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pos[sa[i]] &amp;&amp; minx + len[pos[sa[i]]] - <span class="number">1</span> &lt;= l) ans[pos[sa[i]]] = minx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i] - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
        <category>Comet-OJ</category>
      </categories>
      <tags>
        <tag>后缀数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Comet OJ - 模拟赛测试 Day2</title>
    <url>/2019/09/29/Comet-OJ-Day2/</url>
    <content><![CDATA[<h1 id="Large-☞-Large-链接"><a href="#Large-☞-Large-链接" class="headerlink" title="$\Large{☞}$ $\Large{链接}$"></a>$\Large{☞}$ <a href="https://www.cometoj.com/contest/70" target="_blank" rel="noopener">$\Large{链接}$</a></h1><p><del>第一场打 $Comet$ 的比赛,被吊打</del></p>
<h1 id="huge-mathcal-T1"><a href="#huge-mathcal-T1" class="headerlink" title="$\huge\mathcal{T1}$"></a>$\huge\mathcal{T1}$</h1><h2 id="Large-mathcal-Description"><a href="#Large-mathcal-Description" class="headerlink" title="$\Large\mathcal{Description}$"></a>$\Large\mathcal{Description}$</h2><p>小 $L$ 有 $n$ 本书(编号范围 $1$ 至 $n$)，现在他要把这些书全部放在书架上，并排成一排。</p>
<p>给定书架的初始状态(即书架上原来放着m本书，并且它们的相对位置规定)，把剩下的书逐一插入，使  得最后构成的排列字典序最小，并输出这个排列。</p>
<p>数据范围 $:$ $1 \le m \le n \le 10^5$</p>
<h2 id="Large-mathcal-Solution"><a href="#Large-mathcal-Solution" class="headerlink" title="$\Large\mathcal{Solution}$"></a>$\Large\mathcal{Solution}$</h2><p>我们可以变一变，我们假设我们手上的书是已经排列好的，要把书架上的那些书插入。</p>
<p>这样做有什么好处呢 $?$</p>
<ul>
<li>我们手上的书顺序是不定的。所以只需要根据序号从小到大排就好了。</li>
<li>要插入的书(即书架上的书)的相对位置是固定的。所以我们只要从前往后扫就行了。</li>
</ul>
<p>接下来的思路就很显然了。两个指针疯狂往后跳就行了，每次输出较小值 <del>跳就完事了</del></p>
<h2 id="Large-mathcal-Code"><a href="#Large-mathcal-Code" class="headerlink" title="$\Large\mathcal{Code}$"></a>$\Large\mathcal{Code}$</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="literal">true</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()) f ^= ch == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x = f ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">bool</span> flg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) read(a[i]), flg[a[i]] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flg[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (a[x] &lt; i &amp;&amp; x &lt;= m) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[x]);</span><br><span class="line">            ++x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (x &lt;= m) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[x++]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="huge-mathcal-T2"><a href="#huge-mathcal-T2" class="headerlink" title="$\huge\mathcal{T2}$"></a>$\huge\mathcal{T2}$</h1><p><del>开题的时候看到<strong>天天</strong>，差点就自闭了</del></p>
<h2 id="Large-mathcal-Description-1"><a href="#Large-mathcal-Description-1" class="headerlink" title="$\Large\mathcal{Description}$"></a>$\Large\mathcal{Description}$</h2><p>有 $n$ 个由小写字母构成的单词(互不相同)。从中选取 $k$ 个单词连接构成字符串(<del>显然</del>最多能构成 $\frac{n!}{(n - k)!}$个)。现给你一个由 $k$ 个单词连成的字符串 $s$，问其在所有可能构成的字符串中从小到大排序后的排名。</p>
<p><strong>数据保证不存在某个单词是另一个单词的前缀</strong></p>
<p>数据范围 $:$ 所有单词总长度不超过 $10 ^ 6$</p>
<h2 id="Large-mathcal-Solution-1"><a href="#Large-mathcal-Solution-1" class="headerlink" title="$\Large\mathcal{Solution}$"></a>$\Large\mathcal{Solution}$</h2><p>比赛的时候第一眼看上去像康托展开。但是这是从 $n$ 个数中选出 $k$ 个，并不是全排列，所以不行 <del>反正我不会</del>。所以我们另找思路。</p>
<p>注意到有一个很好的性质 $:$ 不存在某个单词是另一个单词的前缀</p>
<p>这就保证了，<strong>所有构成的字符串中没有相同的</strong>。所以，当我们知道了一个构成的字符串，我们可以确定它是有哪些单词构成的，也能确定这些单词的排列顺序。</p>
<p>字符串处理不太方便。我们可以用类似离散化的做法，把每个单词转成数字。这样每个构成的字符串都由 $k$ 个数字构成，可以用一个数组记录。</p>
<p>接下来，我们考虑如何求解。</p>
<p>考虑 $s$ 的第 $i$ 个的数字， 且前 $i - 1$ 个数字已经匹配上。</p>
<ul>
<li>该串的第 $i$ 个数字小于 $s$ 的第 $i$ 个数字，则满足。</li>
<li>该串的第 $i$ 个数字等于 $s$ 的第 $i$ 个数字，则推到第 $i + 1$ 个数字。</li>
</ul>
<p>这里需要记录比 $x$ 小且未被使用过的数字个数，我们可以用树状数组维护。</p>
<p><strong>还有一点值得注意的是</strong>，这里求 $s$ 的构成时建议要用 $trie$ 。比赛的时候用 $map$，结果 $MLE$ 了一个点，同机房的好几个大佬也是，所以慎用！！！</p>
<h2 id="Large-mathcal-Code-1"><a href="#Large-mathcal-Code-1" class="headerlink" title="$\Large\mathcal{Code}$"></a>$\Large\mathcal{Code}$</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="literal">true</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()) f ^= ch == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x = f ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s[N], S;</span><br><span class="line"><span class="keyword">int</span> a[N], c[N], n, k, cur = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    node *ch[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">&#125;;</span><br><span class="line">node *rt = <span class="keyword">new</span> node();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; x &lt;= n; x += lowbit(x)) ++c[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; x &gt; <span class="number">0</span>; x -= lowbit(x)) ans += c[x];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>) ans = ans * a % P;</span><br><span class="line">        a = a * a % P;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> power(x, P - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> str, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    node *root = rt;</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = str[i] - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (root -&gt; ch[x] == <span class="literal">NULL</span>) root -&gt; ch[x] = <span class="keyword">new</span> node(), root -&gt; ch[x] -&gt; tot = <span class="number">0</span>;</span><br><span class="line">        root = root -&gt; ch[x];</span><br><span class="line">    &#125;</span><br><span class="line">    root -&gt; tot = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    node *root = rt;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        root = root -&gt; ch[S[cur] - <span class="string">'a'</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (root -&gt; tot) <span class="keyword">break</span>;</span><br><span class="line">        ++cur;</span><br><span class="line">    &#125;</span><br><span class="line">    a[k] = root -&gt; tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">    <span class="built_in">std</span>::sort(s + <span class="number">1</span>, s + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) insert(s[i], i);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        find(i);</span><br><span class="line">        ++cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mul = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; ++i) mul = (mul * (n - i)) % P;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        ans = (ans + (a[i] - <span class="number">1</span> - query(a[i])) * mul % P) % P;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; k) &#123;</span><br><span class="line">            add(a[i]);</span><br><span class="line">            mul = mul * inv(n - i) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="huge-mathcal-T3"><a href="#huge-mathcal-T3" class="headerlink" title="$\huge\mathcal{T3}$"></a>$\huge\mathcal{T3}$</h1><h2 id="Large-mathcal-Description-2"><a href="#Large-mathcal-Description-2" class="headerlink" title="$\Large\mathcal{Description}$"></a>$\Large\mathcal{Description}$</h2><p>有一个 $n \times m$ 的阵列，每个点都有一个权值。现要删去一些行与列(不能全部删去)，使得剩下的阵列中，每一行以及每一列都是单调的(即点的权值单调递增或单调递减)。求方案数。</p>
<p>数据保证所有盆栽的高度排名组合起来为 $1$ 至 $n \times m$ 的一个排列。</p>
<p>数据范围 $:$ $1 \le n, m \le 20$</p>
<h2 id="Large-mathcal-Solution-2"><a href="#Large-mathcal-Solution-2" class="headerlink" title="$\Large\mathcal{Solution}$"></a>$\Large\mathcal{Solution}$</h2><h3 id="首先考虑暴力。"><a href="#首先考虑暴力。" class="headerlink" title="首先考虑暴力。"></a><strong>首先考虑暴力。</strong></h3><p>直接状压枚举行列的选取情况即可。复杂度 $O(2^{n + m} \times n \times m)$</p>
<p><del>(这道题暴力性价比还是很高的，可以拿到 $65$ 分的好成绩)</del></p>
<p><strong>我们发现瓶颈只要在于枚举行列。所以只能枚举行(或列)，然后去确定列(或行)的选取方案。</strong></p>
<h3 id="接下来我们考虑如何优化。"><a href="#接下来我们考虑如何优化。" class="headerlink" title="接下来我们考虑如何优化。"></a>接下来我们考虑如何优化。</h3><p>我们先枚举行的选取情况，再去判断列。</p>
<p>首先不满足单调性的列肯定不能选取 <del>果断删去</del> ，然后我们再记录下那些满足的列。</p>
<p>怎么求这些满足的列对答案的贡献呢？</p>
<ul>
<li><p>只选取一列。显然就是满足的列的数量。</p>
</li>
<li><p>选取两列及以上。我们把行的单调性用二进制数 $s$ 来表示， 单调递增的行为 $1$, 单调递减或未选取的行为 $0$。我们可以得到状态转移方程：<br>$$<br>f[s][k] = \sum_{j &lt; k} f[s][j] + 1<br>$$<br>$+1$ 表示只选取 $j , k$ 两列。</p>
<p>我们还可以发现，两列之间的递增递减关系是固定的，这就意味着对于 $j,k$ 两列，有效状态 $s$ 只有一个。而两列之间的递增递减关系是可以预处理出来的。</p>
<p>所以 $DP$ 的复杂度为 $O(m^2)$</p>
</li>
</ul>
<p>经过一番优化，我们已经将时间复杂度降至 $O(2 ^ n \times m ^ 2)$，可以通过本题。</p>
<h2 id="Large-mathcal-Code-2"><a href="#Large-mathcal-Code-2" class="headerlink" title="$\Large\mathcal{Code}$"></a>$\Large\mathcal{Code}$</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="literal">true</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()) f ^= ch == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x = f ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">25</span>, M = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N][N], p[N][N], c[N], f[M][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) read(a[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = n; k; --k) p[i][j] = (p[i][j] &lt;&lt; <span class="number">1</span>) | (a[k][i] &gt; a[k][j]);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>; i; --i) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">0</span>, flg = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!((<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>)) &amp; i)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (x &amp;&amp; !flg) &#123;</span><br><span class="line">                    flg = a[k][j] &lt; x ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (x &amp;&amp; flg) &#123;</span><br><span class="line">                    <span class="keyword">int</span> y = a[k][j] &lt; x ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (flg != y) &#123;</span><br><span class="line">                        flg = <span class="number">-2</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                x = a[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flg == <span class="number">-2</span>) <span class="keyword">continue</span>;</span><br><span class="line">            c[++t] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= t; ++j) </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; j; ++k) f[p[c[j]][c[k]] &amp; i][j] += f[p[c[j]][c[k]] &amp; i][k] + <span class="number">1</span>, ans += f[p[c[j]][c[k]] &amp; i][k] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= t; ++j) </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; j; ++k) f[p[c[j]][c[k]] &amp; i][j] = <span class="number">0</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>我写的可能不太好。如果还有什么不懂之处，可以去康一康官方题解。<del>比我不知道高到哪里去了</del></p>
<p>$\huge{☞}$<a href="http://static.eduzhixin.com/cometoj/solution/contest_70_1.pdf" target="_blank" rel="noopener">$\Large{戳这里}$</a></p>
<hr>
<h1 id="Large-mathcal-Impression"><a href="#Large-mathcal-Impression" class="headerlink" title="$\Large\mathcal{Impression}$"></a>$\Large\mathcal{Impression}$</h1><p>第一次打 $Comet OJ$ 的比赛，也是成功地一道题都没有 $AC$ 。</p>
<ul>
<li>$T1$ 一个 $**$ 错误，挂 $10$ 分</li>
<li>$T2$ $map$ 内存炸掉，挂 $10$ 分 <del>以前从来没有想过</del></li>
<li>$T3$ 还是一个 $**$ 错误，暴力挂 $5$ 分 <del>数据再强点直接没了</del></li>
</ul>
<p>会得还是太少，打代码也不够细节。我还是太菜了$……$</p>
<hr>
<p>不在低谷时黯然离去，不在巅峰时慕名而来。</p>
]]></content>
      <categories>
        <category>比赛</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>trie</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 【[WC2016]挑战NPC】</title>
    <url>/2019/09/27/solve-Uoj171/</url>
    <content><![CDATA[<h1 id="Large-mathcal-Description"><a href="#Large-mathcal-Description" class="headerlink" title="$\Large\mathcal{Description}$"></a>$\Large\mathcal{Description}$</h1><p>有 $n$ 个球和 $m$ 个筐子。</p>
<p>每个筐里最多能装三个。如果一个筐子内有不超过 $1$ 个球，那么我们称这样的筐子为<strong>半空</strong>的。</p>
<p><strong>每个球都必须放进一个筐子中</strong>。且对于每个球有一些限制，即能放进哪个筐里。</p>
<p>现要求半空的筐最多有几个，并输出方案。</p>
<p><del>小 I 浅笑：“所以，等我领图灵奖吧！”</del></p>
<h1 id="Large-mathcal-Solution"><a href="#Large-mathcal-Solution" class="headerlink" title="$\Large\mathcal{Solution}$"></a>$\Large\mathcal{Solution}$</h1><p>机房大佬介绍的一道题 <del>刚学的带花树，但发现基本找不到题</del></p>
<p>首先，每个筐里最多放三个球。我们可以把每个筐拆成三个点，再把每个球作为一个点。这样，用我们最终得出的方案构成的图中，每个点的度数一定都不会超过1</p>
<p>这就与<strong>一般图的最大匹配</strong>相似，但我们显然不能直接跑一遍带花树。因为装有一个球以上的筐会对答案造成影响。<del>所以我们必须操作一下</del></p>
<p><strong>有一种很妙的想法就是， 在每个筐拆出的三个点之间互相连边。</strong>$\mathcal{Why?}$</p>
<p>我们依次进行考虑</p>
<ul>
<li>非半空的筐子(即装有 $2$ 或 $3$ 个球)。他们对答案作出的贡献是无意义的，所以要减去。而他们对答案的影响就是装有的球数。</li>
<li>装有 $1$ 个球的筐子。他们对答案应作出 $1$ 的贡献。但由于筐的三个点之间有连边，所以他们对当前答案(即带花树跑出来的结果)贡献是 $2$。所以减 $1$。</li>
<li>空的筐。他们对答案应作出 $1$ 的贡献。但由于筐的三个点之间有连边，所以他们对当前答案的贡献是 $1$。所以不变。</li>
</ul>
<p>归纳一下就可以得到，<strong>一个筐内装有多少球，他就对最终答案造成了多少影响。</strong></p>
<p>由于每个球都必须放入一个筐子, 所以，最终答案就等于带花树跑出来的答案减去 $n$。</p>
<h1 id="Large-mathcal-Code"><a href="#Large-mathcal-Code" class="headerlink" title="$\Large\mathcal{Code}$"></a>$\Large\mathcal{Code}$</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冗长的代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="literal">true</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()) f ^= ch == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x = f ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>, M = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    e[++cnt] = (edge) &#123;y, head[x]&#125;, head[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[N], pre[N], f[N], tic[N], tim = <span class="number">0</span>, m, vis[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">father</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] == x ? x : fa[x] = father(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shrink</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (father(x) != top) &#123;</span><br><span class="line">        pre[x] = y, y = f[x];</span><br><span class="line">        <span class="keyword">if</span> (vis[y] == <span class="number">2</span>) vis[y] = <span class="number">1</span>, q.push(y);</span><br><span class="line">        <span class="keyword">if</span> (father(x) == x) fa[x] = top;</span><br><span class="line">        <span class="keyword">if</span> (father(y) == y) fa[y] = top;</span><br><span class="line">        x = pre[y];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    ++tim;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        x = father(x);</span><br><span class="line">        <span class="keyword">if</span> (tic[x] == tim) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">else</span> tic[x] = tim, x = pre[f[x]]; </span><br><span class="line">        <span class="built_in">std</span>::swap(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) fa[i] = i;</span><br><span class="line">    <span class="built_in">std</span>::fill(pre + <span class="number">1</span>, pre + m + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::fill(vis + <span class="number">1</span>, vis + m + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (q.size()) q.pop();</span><br><span class="line">    vis[s] = <span class="number">1</span>, q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (q.size()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] == <span class="number">2</span> || father(x) == father(v)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                vis[v] = <span class="number">2</span>, pre[v] = x;</span><br><span class="line">                <span class="keyword">if</span> (!f[v]) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> cur = v, last; cur; cur = last) &#123;</span><br><span class="line">                        last = f[pre[cur]];</span><br><span class="line">                        f[pre[cur]] = cur, f[cur] = pre[cur];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                vis[f[v]] = <span class="number">1</span>, q.push(f[v]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (vis[v] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> lca = LCA(x, v);</span><br><span class="line">                shrink(x, v, lca);</span><br><span class="line">                shrink(v, x, lca);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    read(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, E;</span><br><span class="line">        read(n), read(m), read(E);</span><br><span class="line">        cnt = tim = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">std</span>::fill(head + <span class="number">1</span>, head + n + <span class="number">3</span> * m + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">std</span>::fill(f + <span class="number">1</span>, f + n + <span class="number">3</span> * m + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">std</span>::fill(tic + <span class="number">1</span>, tic + n + <span class="number">3</span> * m + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= E; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            read(x), read(y);</span><br><span class="line">            <span class="keyword">int</span> z = n + (y - <span class="number">1</span>) * <span class="number">3</span>;</span><br><span class="line">            add_edge(x, z + <span class="number">1</span>), add_edge(z + <span class="number">1</span>, x);</span><br><span class="line">            add_edge(x, z + <span class="number">2</span>), add_edge(z + <span class="number">2</span>, x);</span><br><span class="line">            add_edge(x, z + <span class="number">3</span>), add_edge(z + <span class="number">3</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = n + (i - <span class="number">1</span>) * <span class="number">3</span>;</span><br><span class="line">            add_edge(x + <span class="number">1</span>, x + <span class="number">2</span>), add_edge(x + <span class="number">2</span>, x + <span class="number">1</span>);</span><br><span class="line">            add_edge(x + <span class="number">1</span>, x + <span class="number">3</span>), add_edge(x + <span class="number">3</span>, x + <span class="number">1</span>);</span><br><span class="line">            add_edge(x + <span class="number">2</span>, x + <span class="number">3</span>), add_edge(x + <span class="number">3</span>, x + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = -n;</span><br><span class="line">        m = m * <span class="number">3</span> + n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) ans += (!f[i] &amp;&amp; match(i));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, (f[i] - n - <span class="number">1</span>) / <span class="number">3</span> + <span class="number">1</span>, <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$\huge\mathcal{CSP 2019}$ $\huge\color{red}{\mathcal{R}}\color{yellow}{\mathcal{P}}\color{orange}{++}$ </p>
]]></content>
      <categories>
        <category>题解</category>
        <category>Uoj</category>
      </categories>
      <tags>
        <tag>一般图最大匹配</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 CF1220D 【Alex and Julian】</title>
    <url>/2019/09/25/solve-CF1220D/</url>
    <content><![CDATA[<h1 id="Large-mathcal-Description"><a href="#Large-mathcal-Description" class="headerlink" title="$\Large\mathcal{Description}$"></a>$\Large\mathcal{Description}$</h1><p>给定一个正整数集合$B$。</p>
<p>让所有整数都为一张无向图中的顶点。$i, j$之间有边，当且仅当$\left| i - j\right|  \in B$。</p>
<p>现在要从B中删去最少的元素，使得这张无向图变成二分图。</p>
<h1 id="Large-mathcal-Solution"><a href="#Large-mathcal-Solution" class="headerlink" title="$\Large\mathcal{Solution}$"></a>$\Large\mathcal{Solution}$</h1><p>首先，根据二分图的性质可知，<strong>判断这张图是不是二分图，只需判断是否存在奇环</strong></p>
<h2 id="我们先考虑只有两个数的情况"><a href="#我们先考虑只有两个数的情况" class="headerlink" title="我们先考虑只有两个数的情况"></a><strong>我们先考虑只有两个数的情况</strong></h2><p>则若存在奇环，当且仅当存在正整数$a,b$, 使得 $ax = by$ 且 $(a + b)  \bmod 2 = 1$。即<br>$$<br>\frac{\operatorname{lcm}(x, y)}{x} + \frac{\operatorname{lcm}(x, y)}{y} \equiv 1\pmod{2}<br>$$<br>于是就可以开始<del>快乐地</del>分类讨论了。</p>
<ul>
<li>$x, y$ 都为奇数。那么 $\operatorname{lcm}(x, y)$ 肯定是奇数，所以不满足。</li>
<li>$x, y$ 为一奇一偶。那么 $\operatorname{lcm}(x, y)$ 为偶数，所以满足。</li>
<li>$x, y$ 都为偶数。可以转化为前面两种情况。</li>
</ul>
<p>然后，归纳一下就可以得到$:$  </p>
<p>​                   <strong>这张图为二分图，即不存在奇环，当且仅当集合B中所有数在二进制下末尾有相同位数的零</strong></p>
<h2 id="拓展到多个数"><a href="#拓展到多个数" class="headerlink" title="拓展到多个数"></a><strong>拓展到多个数</strong></h2><p>假设我们现在找含 $i$ 种单位长度的奇环(即用集合B中 $i$ 个数)，且不存在含 $i$ 种以下单位长度的奇环。</p>
<p>即 $a_1x_1 + a_2x_2 + a_3x_3 + … a_{i-1}x_{i-1} = 0$ 且 $(a_1+a_2+a_3+…a_{i-1}) \bmod 2 = 0$</p>
<p>现在我们在这个式子中加入 $x_i$。</p>
<p>根据假设，我们还可以得到 $A_1x_1 + B_1x_i = 0, A_2x_2 + B_2x_i = 0 … A_{i - 1}x_{i-1} + B_{i-1}x_i = 0$ 且 $(A_j + B_j) \bmod 2 = 0$</p>
<p>将这些式子中的一些加入到原式中，均可实现在环中加入 $x_i$ 这个长度，但 $a$ 之和始终为偶数。</p>
<p><strong>因此，我们只需要判断两个数的情况就行了</strong></p>
<h1 id="Large-mathcal-Code"><a href="#Large-mathcal-Code" class="headerlink" title="$\Large\mathcal{Code}$"></a>$\Large\mathcal{Code}$</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="literal">true</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()) f ^= ch == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x = f ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">105</span>, N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot[N], a[N], c[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">int</span> maxx = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        read(a[i]);</span><br><span class="line">        <span class="keyword">int</span> x = a[i], cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( ; !(x &amp; <span class="number">1</span>); x &gt;&gt;= <span class="number">1</span>, ++cnt);</span><br><span class="line">        tot[i] = cnt;</span><br><span class="line">        ++c[cnt];</span><br><span class="line">        <span class="keyword">if</span> (c[cnt] &gt; maxx) maxx = c[cnt], pos = cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, n - maxx);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (tot[i] != pos) <span class="built_in">printf</span>(<span class="string">"%lld "</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 CF1217E 【Sum Queries?】</title>
    <url>/2019/09/08/solve-CF1217E/</url>
    <content><![CDATA[<ul>
<li><a href="https://codeforces.com/contest/1217/problem/E" target="_blank" rel="noopener">题目戳这里</a></li>
</ul>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a><strong>题意</strong></h1><p>记$sum$为一个多重集的所有元素的和</p>
<p><strong>我们这样定义一个多重集是平衡的$:$</strong></p>
<p>对于$sum$的每一个数位，多重集中至少有一个元素与$sum$此数位相同</p>
<p><strong>现在，给你一个a数组，有两种操作</strong></p>
<p>1.修改a数组中一个位置的值</p>
<p>2.询问一个区间中所有<strong>不平衡多重集的sum的最小值</strong></p>
<h1 id="large-mathcal-Solution"><a href="#large-mathcal-Solution" class="headerlink" title="$\large\mathcal{Solution}$"></a>$\large\mathcal{Solution}$</h1><p>首先，容易得到的是，一个平衡的多重集中不存在两个及以上的元素在某个数位都有值（大于0）。反过来， 一个不平衡的多重集中至少有一个数位上有两个及以上的元素有值。</p>
<p><strong>如果没有修改</strong></p>
<p>由不平衡多重集的这个性质可以得出，只考虑一个数位的话，<strong>sum的最小值为在该位上有值的最小的两个元素之和</strong>。</p>
<p>考虑多个数位的话，那答案就是$min${每个数位的sum的最小值}</p>
<p>知道了这点，做法就<del>很显然了</del>，我们可以对每一个数位建一颗线段树，维护在该位上有值的元素的最小值$Min$和次小值$Secmin$,那么答案就是$min${$Min_{i}+Secmin_{i}$}。</p>
<p><strong>接下来，考虑带上修改</strong></p>
<p>直接把$a_{x}$改成$y$不太容易操作，所以我们可以先把$a_{x}$变成$0$，再改成$y$。(两次单点修改)</p>
<h1 id="large-mathcal-Code"><a href="#large-mathcal-Code" class="headerlink" title="$\large\mathcal{Code}$"></a>$\large\mathcal{Code}$</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tp &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="literal">true</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()) f ^= ch == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x = f ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> Min, Secmin;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Min(x) tre[x].Min</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> Secmin(x) tre[x].Secmin</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span> &#123;</span></span><br><span class="line">    node tre[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        Min(p) = Secmin(p) = INT_MAX;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[l]) Min(p) = a[l];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(p &lt;&lt; <span class="number">1</span>, l, mid), build(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">if</span> (Min(p &lt;&lt; <span class="number">1</span>) &lt; Min(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>)) &#123;</span><br><span class="line">            Min(p) = Min(p &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            Secmin(p) = <span class="built_in">std</span>::min(Secmin(p &lt;&lt; <span class="number">1</span>), Min(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Min(p) = Min(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">            Secmin(p) = <span class="built_in">std</span>::min(Secmin(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>), Min(p &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            Min(p) = Secmin(p) = INT_MAX;</span><br><span class="line">            <span class="keyword">if</span> (k) Min(p) = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid) change(p &lt;&lt; <span class="number">1</span>, l, mid, x, k, v);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid) change(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, k, v);</span><br><span class="line">        <span class="keyword">if</span> (Min(p &lt;&lt; <span class="number">1</span>) &lt; Min(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>)) &#123;</span><br><span class="line">            Min(p) = Min(p &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            Secmin(p) = <span class="built_in">std</span>::min(Secmin(p &lt;&lt; <span class="number">1</span>), Min(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Min(p) = Min(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">            Secmin(p) = <span class="built_in">std</span>::min(Secmin(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>), Min(p &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> node <span class="title">Get_ans</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y) <span class="keyword">return</span> tre[p];</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (y &lt;= mid) <span class="keyword">return</span> Get_ans(p &lt;&lt; <span class="number">1</span>, l, mid, x, y);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid) <span class="keyword">return</span> Get_ans(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, y);</span><br><span class="line">        node ans1 = Get_ans(p &lt;&lt; <span class="number">1</span>, l, mid, x, y), ans2 = Get_ans(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, y), ans;</span><br><span class="line">        <span class="keyword">if</span> (ans1.Min &lt; ans2.Min) &#123;</span><br><span class="line">            ans.Min = ans1.Min;</span><br><span class="line">            ans.Secmin = <span class="built_in">std</span>::min(ans1.Secmin, ans2.Min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ans.Min = ans2.Min;</span><br><span class="line">            ans.Secmin = <span class="built_in">std</span>::min(ans2.Secmin, ans1.Min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segment_Tree T[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x = <span class="number">1</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) b[j] = (a[j] / x) % <span class="number">10</span>;</span><br><span class="line">        T[i].build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        x *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> opt, x, y;</span><br><span class="line">        read(opt), read(x), read(y);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) T[i].change(<span class="number">1</span>, <span class="number">1</span>, n, x, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            a[x] = y;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">                T[i].change(<span class="number">1</span>, <span class="number">1</span>, n, x, y % <span class="number">10</span>, a[x]);</span><br><span class="line">                y /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">                node t = T[i].Get_ans(<span class="number">1</span>, <span class="number">1</span>, n, x, y);</span><br><span class="line">                ans = <span class="built_in">std</span>::min(ans, (t.Secmin == INT_MAX ? INT_MAX : t.Min + t.Secmin));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans == INT_MAX ? <span class="number">-1</span> : ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 P4803 【[CCO 2015]太阳能飞行】</title>
    <url>/2019/08/06/solve-P4083/</url>
    <content><![CDATA[<ul>
<li><a href="https://www.luogu.org/problemnew/show/P4803" target="_blank" rel="noopener">题目传送门</a> </li>
<li><a href="https://cemc.math.uwaterloo.ca/contests/computing/2015/stage%202/day1.pdf" target="_blank" rel="noopener">CCO原题传送门</a>day1 T3 </li>
</ul>
<p><em>说实话，这道题是我随机跳到的。初看觉得不难，结果在码代码的时候遇到很多问题。最后，八WA之后终见AC。<del>这一定是我太蒟了</del></em></p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a><strong>题意</strong></h1><p>我觉得本题题意也是一大难点，所以在看题目时要逐字，多看几遍。<del>我在做的过程中，看错了两遍题目（前车之鉴），可能是本人的语文不好</del></p>
<p>本题的意思大概就是，在一个坐标系中，有n架飞机直线飞行（当然不是匀速），给定X坐标范围，又给定每架飞机的起始高度和终止高度。（其实就相当于n条一次函数的图象）。每架飞机还有一个干扰值，表示影响它正下方的飞机太阳吸收能力的强弱。现有Q个问题，请你求出区间[Si,Si+K]中，第Pi架飞机的太阳能板吸收的太阳光减少的值。我所说的难理解的地方就在这里。这里要求的并不是只要在该区间范围内能出现在第Pi架飞机上方的飞机。而是要求该区间中的每一时刻的减少的值中的最大值（可以这么理解）。</p>
<h1 id="large-mathcal-Solution"><a href="#large-mathcal-Solution" class="headerlink" title="$\large\mathcal{Solution}$"></a>$\large\mathcal{Solution}$</h1><p><strong>刚开始真的无从下手，然后就看到。。。</strong><br><img src="https://s2.ax1x.com/2019/03/13/AF6IqP.png" alt></p>
<p><strong>这才有点眉目。</strong></p>
<p>对于n架飞机，我们可以预处理出每两架飞机航线（相当于一次函数）之间的关系（要么相交，要么不相交）。而只要两架飞机不在相交点上，就一定存在其中一架飞机对另外一家飞机有影响。也就是说，任何一架飞机对于一架它可以影响的飞机，影响的范围只可能是 [0,相交点),(相交点,X]（相交的情况）、[0,X]（不相交的情况）。</p>
<p>知道了可影响范围的计算，于是一个奇妙的想法萌发，<strong>前缀和</strong>！因为<strong>对于一架飞机而言，它的被影响的值只有在经过一个交点后才会改变（因为飞机的相对位置就改变了）</strong>。因此，就可以记录下每个影响范围的起点和终点，利用<strong>区间加值</strong>的方法（这个，相信一般人都会吧）。这时候就可以利用前缀和，造一个前缀和数组，这样就可以得出每架飞机每一个时刻的被影响值。</p>
<p>最后回答问题的时候，只要先利用二分找出起点，然后往后跳，直到终点，中途用一个变量记录最大值即可。（不清楚的请看代码注解）</p>
<p><strong>这样，这道题就解决了。</strong></p>
<h1 id="附"><a href="#附" class="headerlink" title="附:"></a><strong>附</strong>:</h1><ul>
<li><p>这是本蒟蒻的第一篇题解，望支持。如有错误或有更优解，请告知。</p>
</li>
<li><p>CCO官网上有数据 <a href="https://cemc.math.uwaterloo.ca/contests/computing/2015/index.html" target="_blank" rel="noopener">传送门</a></p>
</li>
<li><p>这是一篇之前blog搬过来的文章，码风勿喷 <del>嘤嘤嘤</del></p>
</li>
</ul>
<h1 id="large-mathcal-Code"><a href="#large-mathcal-Code" class="headerlink" title="$\large\mathcal{Code}$"></a>$\large\mathcal{Code}$</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本代码中的快读和快输均是之前尝试时加的，没有应该问题不大</span></span><br><span class="line"><span class="comment">//代码中有些地方可能写的有些复杂，可以多考虑考虑</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xx</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val;</span><br><span class="line">&#125;a[<span class="number">2010</span>][<span class="number">2010</span>],f[<span class="number">2010</span>][<span class="number">2010</span>];                         <span class="comment">//f 前缀数组</span></span><br><span class="line"><span class="keyword">int</span> x,kk,n,Q,b[<span class="number">2010</span>],y[<span class="number">2010</span>],c[<span class="number">2010</span>],l[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">double</span> k[<span class="number">2010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(xx s,xx t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.x&lt;t.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;    <span class="comment">//优化读入</span></span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;   <span class="comment">//优化输出</span></span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>) write(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    x=read();kk=read();n=read();Q=read();</span><br><span class="line">    ff(i,<span class="number">1</span>,n) b[i]=read(),y[i]=read(),c[i]=read(),k[i]=<span class="number">1.0</span>*(y[i]-b[i])/x;     <span class="comment">// y[]、b[]对应一次函数y=kx+b中的k、b</span></span><br><span class="line">    ff(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">        ff(j,i+<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">int</span> ii=i,jj=j;</span><br><span class="line">            <span class="keyword">if</span>((b[ii]&gt;b[jj]&amp;&amp;y[ii]&lt;y[jj])||(b[ii]&lt;b[jj]&amp;&amp;y[ii]&gt;y[jj]))&#123;      <span class="comment">//相交的情况</span></span><br><span class="line">                <span class="keyword">if</span>(b[ii]&lt;b[jj]&amp;&amp;y[ii]&gt;y[jj]) swap(ii,jj);</span><br><span class="line">                <span class="keyword">double</span> dx=<span class="number">1.0</span>*(b[ii]-b[jj])/(k[jj]-k[ii]);       <span class="comment">//计算交点（基本操作）</span></span><br><span class="line">                a[jj][++l[jj]].val=-c[ii];a[jj][l[jj]].x=dx;sum[jj]+=c[ii]; <span class="comment">//区间加，并记录下交点，sum数组相当于x=0时的前缀数组的值</span></span><br><span class="line">                a[ii][++l[ii]].val=c[jj];a[ii][l[ii]].x=dx;                </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;                                                          <span class="comment">//不相交的情况</span></span><br><span class="line">                <span class="keyword">if</span>(b[ii]&gt;b[jj]) swap(ii,jj);</span><br><span class="line">                sum[ii]+=c[jj];                              <span class="comment">//同上     </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ff(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        sort(a[i]+<span class="number">1</span>,a[i]+l[i]+<span class="number">1</span>,cmp);          <span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> cc=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ll=l[i];</span><br><span class="line">        l[i]=<span class="number">0</span>;</span><br><span class="line">        ff(j,<span class="number">1</span>,ll)&#123;</span><br><span class="line">            cc+=a[i][j].val;</span><br><span class="line">            <span class="keyword">if</span>(!(<span class="built_in">abs</span>(a[i][j].x-a[i][j+<span class="number">1</span>].x)&lt;=<span class="number">1e-7</span>)) f[i][++l[i]].x=a[i][j].x,f[i][l[i]].val=cc+f[i][l[i]<span class="number">-1</span>].val,cc=<span class="number">0</span>; <span class="comment">//造前缀数组，并去重</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ff(i,<span class="number">1</span>,Q)&#123;     </span><br><span class="line">        <span class="keyword">int</span> ll,rr;</span><br><span class="line">        x=read();ll=read();</span><br><span class="line">        <span class="keyword">int</span> l1=<span class="number">1</span>,r1=l[x],st=<span class="number">0</span>;</span><br><span class="line">        rr=ll+kk;</span><br><span class="line">        <span class="keyword">while</span>(l1&lt;=r1)&#123;           <span class="comment">//二分找起点</span></span><br><span class="line">            <span class="keyword">int</span> mid=(l1+r1+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(f[x][mid].x&lt;=ll) st=mid,l1=mid+<span class="number">1</span>; <span class="keyword">else</span> r1=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;           </span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;st&lt;=l[x]&amp;&amp;f[x][st].x&lt;rr;st++) <span class="keyword">if</span>(f[x][st].val+sum[x]&gt;ans) ans=f[x][st].val+sum[x]; <span class="comment">//点往后跳，找最大值</span></span><br><span class="line">        write(ans);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2019/03/13/AF2YUf.png" alt><br>$\Huge{祝大家RP++！！！}$</p>
]]></content>
      <categories>
        <category>题解</category>
        <category>luogu</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2019/08/06/test/</url>
    <content><![CDATA[<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><hr>
<p>$test = test$</p>
<p><em>test</em></p>
<a id="more"></a>

<p><strong>test</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"test"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
